import type { NextConfig } from "next";const withBundleAnalyzer = require('@next/bundle-analyzer')({  enabled: process.env.ANALYZE === 'true',});const nextConfig: NextConfig = {  eslint: {    ignoreDuringBuilds: true,  },  images: {    domains: [      "sogwgxkxuuvvvjbqlcdo.supabase.co", // Supabase storage domain      "localhost",    ],    remotePatterns: [      {        protocol: "https",        hostname: "*.supabase.co",        port: "",        pathname: "/storage/v1/object/public/**",      },    ],    // Enhanced image optimization    formats: ['image/webp', 'image/avif'],    minimumCacheTTL: 86400, // 24 hours    dangerouslyAllowSVG: false,    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",  },  // Performance optimizations  experimental: {    optimizeCss: true,    scrollRestoration: true,  },  // Production optimizations  productionBrowserSourceMaps: false,  compiler: {    removeConsole: process.env.NODE_ENV === "production" ? {      exclude: ['error', 'warn'],    } : false,  },  // Increase static assets caching  staticPageGenerationTimeout: 120,  // Output standalone server build for better performance  output: 'standalone',  // Optimize memory usage  onDemandEntries: {    maxInactiveAge: 60 * 60 * 1000, // 1 hour    pagesBufferLength: 2,  },  // Enhanced webpack configuration  webpack: (config, { dev, isServer }) => {    // Optimize for production builds    if (!dev && !isServer) {      config.optimization = {        ...config.optimization,        splitChunks: {          chunks: 'all',          cacheGroups: {            vendor: {              test: /[\\/]node_modules[\\/]/,              name: 'vendors',              chunks: 'all',            },            common: {
              name: 'common',
              minChunks: 2,
              chunks: 'all',
              enforce: true,
            },
          },
        },
      };
    }

    // Add bundle size analysis
    if (!dev && !isServer && process.env.ANALYZE === 'true') {
      const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
      config.plugins.push(
        new BundleAnalyzerPlugin({
          analyzerMode: 'static',
          reportFilename: '../bundle-analysis.html',
          openAnalyzer: false,
        })
      );
    }

    return config;
  },
  // Enhanced headers for performance
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          // DNS prefetch for external domains
          {
            key: 'X-DNS-Prefetch-Control',
            value: 'on'
          },
          // Preconnect to Supabase
          {
            key: 'Link',
            value: '<https://sogwgxkxuuvvvjbqlcdo.supabase.co>; rel=preconnect; crossorigin'
          },
          // Security headers
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff'
          },
          {
            key: 'X-Frame-Options',
            value: 'DENY'
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block'
          },
        ],
      },
      {
        source: '/api/(.*)',
        headers: [
          // Cache API responses appropriately
          {
            key: 'Cache-Control',
            value: 'public, s-maxage=60, stale-while-revalidate=300'
          },
        ],
      },
      {
        source: '/_next/static/(.*)',
        headers: [
          // Long-term caching for static assets
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable'
          },
        ],
      },
    ];
  },
  // Add redirects or rewrites if needed
  async redirects() {
    return [
      // Example redirect for legacy routes if needed
      // {
      //   source: '/old-path',
      //   destination: '/new-path',
      //   permanent: true,
      // },
    ];
  },
};

export default withBundleAnalyzer(nextConfig);